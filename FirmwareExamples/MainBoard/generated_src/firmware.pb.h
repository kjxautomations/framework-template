/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_FIRMWARE_PB_H_INCLUDED
#define PB_FIRMWARE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _NodeId {
    NodeId_PC = 0,
    NodeId_MAIN = 1,
    NodeId_AUX = 2
} NodeId;

typedef enum _LedStatus {
    LedStatus_OFF = 0,
    LedStatus_ON = 1
} LedStatus;

typedef enum _LedType {
    LedType_LED1 = 0,
    LedType_LED2 = 1,
    LedType_LED3 = 2
} LedType;

/* Struct definitions */
typedef struct _RequestHeader {
    uint32_t request_id;
    NodeId source_node_id;
    NodeId target_node_id;
} RequestHeader;

typedef struct _ResponseHeader {
    uint32_t request_id;
    NodeId source_node_id;
    NodeId target_node_id;
} ResponseHeader;

typedef struct _Ack {
    char dummy_field;
} Ack;

typedef struct _Nack {
    uint32_t error_code;
} Nack;

typedef struct _LedControl {
    LedType led_type;
    LedStatus led_status;
} LedControl;

typedef struct _GetFirmwareVersions {
    char dummy_field;
} GetFirmwareVersions;

typedef struct _Ping {
    uint32_t id;
} Ping;

typedef struct _Pong {
    uint32_t id;
} Pong;

typedef struct _FirmwareVersions {
    int32_t main_version;
    int32_t aux_version;
} FirmwareVersions;

typedef struct _Request {
    RequestHeader header;
    bool has_ping;
    Ping ping;
    bool has_led_control;
    LedControl led_control;
    bool has_get_firmware_versions;
    GetFirmwareVersions get_firmware_versions;
} Request;

typedef struct _Response {
    ResponseHeader header;
    bool has_ack;
    Ack ack;
    bool has_nak;
    Nack nak;
    bool has_pong;
    Pong pong;
    bool has_firmware_versions;
    FirmwareVersions firmware_versions;
} Response;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _NodeId_MIN NodeId_PC
#define _NodeId_MAX NodeId_AUX
#define _NodeId_ARRAYSIZE ((NodeId)(NodeId_AUX+1))

#define _LedStatus_MIN LedStatus_OFF
#define _LedStatus_MAX LedStatus_ON
#define _LedStatus_ARRAYSIZE ((LedStatus)(LedStatus_ON+1))

#define _LedType_MIN LedType_LED1
#define _LedType_MAX LedType_LED3
#define _LedType_ARRAYSIZE ((LedType)(LedType_LED3+1))

#define RequestHeader_source_node_id_ENUMTYPE NodeId
#define RequestHeader_target_node_id_ENUMTYPE NodeId

#define ResponseHeader_source_node_id_ENUMTYPE NodeId
#define ResponseHeader_target_node_id_ENUMTYPE NodeId



#define LedControl_led_type_ENUMTYPE LedType
#define LedControl_led_status_ENUMTYPE LedStatus








/* Initializer values for message structs */
#define RequestHeader_init_default               {0, _NodeId_MIN, _NodeId_MIN}
#define ResponseHeader_init_default              {0, _NodeId_MIN, _NodeId_MIN}
#define Ack_init_default                         {0}
#define Nack_init_default                        {0}
#define LedControl_init_default                  {_LedType_MIN, _LedStatus_MIN}
#define GetFirmwareVersions_init_default         {0}
#define Ping_init_default                        {0}
#define Pong_init_default                        {0}
#define FirmwareVersions_init_default            {0, 0}
#define Request_init_default                     {RequestHeader_init_default, false, Ping_init_default, false, LedControl_init_default, false, GetFirmwareVersions_init_default}
#define Response_init_default                    {ResponseHeader_init_default, false, Ack_init_default, false, Nack_init_default, false, Pong_init_default, false, FirmwareVersions_init_default}
#define RequestHeader_init_zero                  {0, _NodeId_MIN, _NodeId_MIN}
#define ResponseHeader_init_zero                 {0, _NodeId_MIN, _NodeId_MIN}
#define Ack_init_zero                            {0}
#define Nack_init_zero                           {0}
#define LedControl_init_zero                     {_LedType_MIN, _LedStatus_MIN}
#define GetFirmwareVersions_init_zero            {0}
#define Ping_init_zero                           {0}
#define Pong_init_zero                           {0}
#define FirmwareVersions_init_zero               {0, 0}
#define Request_init_zero                        {RequestHeader_init_zero, false, Ping_init_zero, false, LedControl_init_zero, false, GetFirmwareVersions_init_zero}
#define Response_init_zero                       {ResponseHeader_init_zero, false, Ack_init_zero, false, Nack_init_zero, false, Pong_init_zero, false, FirmwareVersions_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define RequestHeader_request_id_tag             1
#define RequestHeader_source_node_id_tag         2
#define RequestHeader_target_node_id_tag         3
#define ResponseHeader_request_id_tag            1
#define ResponseHeader_source_node_id_tag        2
#define ResponseHeader_target_node_id_tag        3
#define Nack_error_code_tag                      1
#define LedControl_led_type_tag                  1
#define LedControl_led_status_tag                2
#define Ping_id_tag                              1
#define Pong_id_tag                              1
#define FirmwareVersions_main_version_tag        1
#define FirmwareVersions_aux_version_tag         2
#define Request_header_tag                       1
#define Request_ping_tag                         2
#define Request_led_control_tag                  3
#define Request_get_firmware_versions_tag        4
#define Response_header_tag                      1
#define Response_ack_tag                         2
#define Response_nak_tag                         3
#define Response_pong_tag                        4
#define Response_firmware_versions_tag           5

/* Struct field encoding specification for nanopb */
#define RequestHeader_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   request_id,        1) \
X(a, STATIC,   REQUIRED, UENUM,    source_node_id,    2) \
X(a, STATIC,   REQUIRED, UENUM,    target_node_id,    3)
#define RequestHeader_CALLBACK NULL
#define RequestHeader_DEFAULT NULL

#define ResponseHeader_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   request_id,        1) \
X(a, STATIC,   REQUIRED, UENUM,    source_node_id,    2) \
X(a, STATIC,   REQUIRED, UENUM,    target_node_id,    3)
#define ResponseHeader_CALLBACK NULL
#define ResponseHeader_DEFAULT NULL

#define Ack_FIELDLIST(X, a) \

#define Ack_CALLBACK NULL
#define Ack_DEFAULT NULL

#define Nack_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   error_code,        1)
#define Nack_CALLBACK NULL
#define Nack_DEFAULT NULL

#define LedControl_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UENUM,    led_type,          1) \
X(a, STATIC,   REQUIRED, UENUM,    led_status,        2)
#define LedControl_CALLBACK NULL
#define LedControl_DEFAULT NULL

#define GetFirmwareVersions_FIELDLIST(X, a) \

#define GetFirmwareVersions_CALLBACK NULL
#define GetFirmwareVersions_DEFAULT NULL

#define Ping_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   id,                1)
#define Ping_CALLBACK NULL
#define Ping_DEFAULT NULL

#define Pong_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   id,                1)
#define Pong_CALLBACK NULL
#define Pong_DEFAULT NULL

#define FirmwareVersions_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    main_version,      1) \
X(a, STATIC,   REQUIRED, INT32,    aux_version,       2)
#define FirmwareVersions_CALLBACK NULL
#define FirmwareVersions_DEFAULT NULL

#define Request_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ping,              2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  led_control,       3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  get_firmware_versions,   4)
#define Request_CALLBACK NULL
#define Request_DEFAULT NULL
#define Request_header_MSGTYPE RequestHeader
#define Request_ping_MSGTYPE Ping
#define Request_led_control_MSGTYPE LedControl
#define Request_get_firmware_versions_MSGTYPE GetFirmwareVersions

#define Response_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ack,               2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  nak,               3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pong,              4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  firmware_versions,   5)
#define Response_CALLBACK NULL
#define Response_DEFAULT NULL
#define Response_header_MSGTYPE ResponseHeader
#define Response_ack_MSGTYPE Ack
#define Response_nak_MSGTYPE Nack
#define Response_pong_MSGTYPE Pong
#define Response_firmware_versions_MSGTYPE FirmwareVersions

extern const pb_msgdesc_t RequestHeader_msg;
extern const pb_msgdesc_t ResponseHeader_msg;
extern const pb_msgdesc_t Ack_msg;
extern const pb_msgdesc_t Nack_msg;
extern const pb_msgdesc_t LedControl_msg;
extern const pb_msgdesc_t GetFirmwareVersions_msg;
extern const pb_msgdesc_t Ping_msg;
extern const pb_msgdesc_t Pong_msg;
extern const pb_msgdesc_t FirmwareVersions_msg;
extern const pb_msgdesc_t Request_msg;
extern const pb_msgdesc_t Response_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define RequestHeader_fields &RequestHeader_msg
#define ResponseHeader_fields &ResponseHeader_msg
#define Ack_fields &Ack_msg
#define Nack_fields &Nack_msg
#define LedControl_fields &LedControl_msg
#define GetFirmwareVersions_fields &GetFirmwareVersions_msg
#define Ping_fields &Ping_msg
#define Pong_fields &Pong_msg
#define FirmwareVersions_fields &FirmwareVersions_msg
#define Request_fields &Request_msg
#define Response_fields &Response_msg

/* Maximum encoded size of messages (where known) */
#define Ack_size                                 0
#define FIRMWARE_PB_H_MAX_SIZE                   Response_size
#define FirmwareVersions_size                    22
#define GetFirmwareVersions_size                 0
#define LedControl_size                          4
#define Nack_size                                6
#define Ping_size                                6
#define Pong_size                                6
#define RequestHeader_size                       10
#define Request_size                             28
#define ResponseHeader_size                      10
#define Response_size                            54

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
